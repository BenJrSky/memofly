'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Actionable = _interopDefault(require('vuedl/src/mixins/actionable'));
var Confirmable = _interopDefault(require('vuedl/src/mixins/confirmable'));
var Vuedl = _interopDefault(require('vuedl'));

//
//
//
//
//
//
//
//
var script = {
  name: 'BeatLoader',
  props: {
    loading: {
      type: Boolean,
      default: true
    },
    color: {
      type: String,
      default: '#5dc596'
    },
    size: {
      type: String,
      default: '15px'
    },
    margin: {
      type: String,
      default: '2px'
    },
    radius: {
      type: String,
      default: '100%'
    }
  },

  data: function data() {
    return {
      spinnerStyle: {
        backgroundColor: this.color,
        height: this.size,
        width: this.size,
        margin: this.margin,
        borderRadius: this.radius
      }
    };
  }

};

/* script */
            var __vue_script__ = script;
            
/* template */
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: _vm.loading,
          expression: "loading"
        }
      ],
      staticClass: "v-spinner"
    },
    [
      _c("div", { staticClass: "v-beat v-beat-odd", style: _vm.spinnerStyle }),
      _vm._v(" "),
      _c("div", { staticClass: "v-beat v-beat-even", style: _vm.spinnerStyle }),
      _vm._v(" "),
      _c("div", { staticClass: "v-beat v-beat-odd", style: _vm.spinnerStyle })
    ]
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  var __vue_inject_styles__ = function (inject) {
    if (!inject) { return }
    inject("data-v-7929aa72_0", { source: "\n.v-spinner .v-beat\n{\n    -webkit-animation: v-beatStretchDelay 0.7s infinite linear;\n            animation: v-beatStretchDelay 0.7s infinite linear;\n    -webkit-animation-fill-mode: both;\n            animation-fill-mode: both;\n    display: inline-block;\n}\n.v-spinner .v-beat-odd\n{\n  animation-delay: 0s;\n}\n.v-spinner .v-beat-even\n{\n  animation-delay: 0.35s;\n}\n@-webkit-keyframes v-beatStretchDelay\n{\n50%\n    {\n        -webkit-transform: scale(0.75);\n                transform: scale(0.75);\n        -webkit-opacity: 0.2;\n                opacity: 0.2;\n}\n100%\n    {\n        -webkit-transform: scale(1);\n                transform: scale(1);\n        -webkit-opacity: 1;\n                opacity: 1;\n}\n}\n@keyframes v-beatStretchDelay\n{\n50%\n    {\n        -webkit-transform: scale(0.75);\n                transform: scale(0.75);\n        -webkit-opacity: 0.2;\n                opacity: 0.2;\n}\n100%\n    {\n        -webkit-transform: scale(1);\n                transform: scale(1);\n        -webkit-opacity: 1;\n                opacity: 1;\n}\n}\n", map: {"version":3,"sources":["/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Loader.vue"],"names":[],"mappings":";AAmDA;;IAEA,2DAAA;YACA,mDAAA;IACA,kCAAA;YACA,0BAAA;IACA,sBAAA;CACA;AAEA;;EAEA,oBAAA;CACA;AACA;;EAEA,uBAAA;CACA;AAEA;;AAEA;;QAEA,+BAAA;gBACA,uBAAA;QACA,qBAAA;gBACA,aAAA;CACA;AACA;;QAEA,4BAAA;gBACA,oBAAA;QACA,mBAAA;gBACA,WAAA;CACA;CACA;AAEA;;AAEA;;QAEA,+BAAA;gBACA,uBAAA;QACA,qBAAA;gBACA,aAAA;CACA;AACA;;QAEA,4BAAA;gBACA,oBAAA;QACA,mBAAA;gBACA,WAAA;CACA;CACA","file":"Loader.vue","sourcesContent":["<template>\n  <div class=\"v-spinner\" v-show=\"loading\">\n    <div class=\"v-beat v-beat-odd\" :style=\"spinnerStyle\"/>\n    <div class=\"v-beat v-beat-even\" :style=\"spinnerStyle\"/>\n    <div class=\"v-beat v-beat-odd\" :style=\"spinnerStyle\"/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'BeatLoader',\n\n  props: {\n    loading: {\n      type: Boolean,\n      default: true\n    },\n    color: {\n      type: String,\n      default: '#5dc596'\n    },\n    size: {\n      type: String,\n      default: '15px'\n    },\n    margin: {\n      type: String,\n      default: '2px'\n    },\n    radius: {\n      type: String,\n      default: '100%'\n    }\n  },\n  data () {\n    return {\n      spinnerStyle: {\n        backgroundColor: this.color,\n        height: this.size,\n        width: this.size,\n        margin: this.margin,\n        borderRadius: this.radius\n      }\n    }\n  }\n\n}\n</script>\n\n<style>\n\n.v-spinner .v-beat\n{\n    -webkit-animation: v-beatStretchDelay 0.7s infinite linear;\n            animation: v-beatStretchDelay 0.7s infinite linear;\n    -webkit-animation-fill-mode: both;\n            animation-fill-mode: both;\n    display: inline-block;\n}\n\n.v-spinner .v-beat-odd\n{\n  animation-delay: 0s;\n}\n.v-spinner .v-beat-even\n{\n  animation-delay: 0.35s;\n}\n\n@-webkit-keyframes v-beatStretchDelay\n{\n    50%\n    {\n        -webkit-transform: scale(0.75);\n                transform: scale(0.75);\n        -webkit-opacity: 0.2;\n                opacity: 0.2;\n    }\n    100%\n    {\n        -webkit-transform: scale(1);\n                transform: scale(1);\n        -webkit-opacity: 1;\n                opacity: 1;\n    }\n}\n\n@keyframes v-beatStretchDelay\n{\n    50%\n    {\n        -webkit-transform: scale(0.75);\n                transform: scale(0.75);\n        -webkit-opacity: 0.2;\n                opacity: 0.2;\n    }\n    100%\n    {\n        -webkit-transform: scale(1);\n                transform: scale(1);\n        -webkit-opacity: 1;\n                opacity: 1;\n    }\n}\n</style>\n"]}, media: undefined });

  };
  /* scoped */
  var __vue_scope_id__ = undefined;
  /* module identifier */
  var __vue_module_identifier__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* component normalizer */
  function __vue_normalize__(
    template, style, script$$1,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Loader.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    {
      var hook;
      if (style) {
        hook = function(context) {
          style.call(this, createInjector(context));
        };
      }

      if (hook !== undefined) {
        if (component.functional) {
          // register for functional component in vue file
          var originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context)
          };
        } else {
          // inject component registration as beforeCreate hook
          var existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }

    return component
  }
  /* style inject */
  function __vue_create_injector__() {
    var head = document.head || document.getElementsByTagName('head')[0];
    var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
    var isOldIE =
      typeof navigator !== 'undefined' &&
      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

      var group = isOldIE ? css.media || 'default' : id;
      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

      if (!style.ids.includes(id)) {
        var code = css.source;
        var index = style.ids.length;

        style.ids.push(id);

        if (isOldIE) {
          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
        }

        if (!style.element) {
          var el = style.element = document.createElement('style');
          el.type = 'text/css';

          if (css.media) { el.setAttribute('media', css.media); }
          if (isOldIE) {
            el.setAttribute('data-group', group);
            el.setAttribute('data-next-index', '0');
          }

          head.appendChild(el);
        }

        if (isOldIE) {
          index = parseInt(style.element.getAttribute('data-next-index'));
          style.element.setAttribute('data-next-index', index + 1);
        }

        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts
            .filter(Boolean)
            .join('\n');
        } else {
          var textNode = document.createTextNode(code);
          var nodes = style.element.childNodes;
          if (nodes[index]) { style.element.removeChild(nodes[index]); }
          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
          else { style.element.appendChild(textNode); }
        }
      }
    }
  }
  /* style inject SSR */
  

  
  var Loader = __vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    __vue_create_injector__,
    undefined
  )

//
var script$1 = {
  components: {
    Loader: Loader
  },
  mixins: [Actionable],
  props: {
    variant: {
      type: String,
      default: 'outline-primary'
    }
  }
};

/* script */
            var __vue_script__$1 = script$1;
            
/* template */
var __vue_render__$1 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "span",
    { staticClass: "dialog-actions" },
    _vm._l(_vm.actionlist, function(action) {
      return _c(
        "b-btn",
        {
          key: action.key,
          attrs: {
            variant: action.variant || _vm.variant,
            loading: _vm.loadingAction === action.key,
            disabled: _vm.isActionDisabled(action) || !!_vm.loadingAction
          },
          on: {
            click: function($event) {
              _vm.onActionClick(action);
            }
          }
        },
        [
          _vm.loadingAction === action.key
            ? _c("Loader", { attrs: { size: "8px" } })
            : [_vm._v(_vm._s(action.text))]
        ],
        2
      )
    })
  )
};
var __vue_staticRenderFns__$1 = [];
__vue_render__$1._withStripped = true;

  /* style */
  var __vue_inject_styles__$1 = function (inject) {
    if (!inject) { return }
    inject("data-v-b0725018_0", { source: "\n.dialog-actions button {\n   margin-right: 4px;\n   margin-right: .25rem;\n}\n", map: {"version":3,"sources":["/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogActions.vue"],"names":[],"mappings":";AA+BA;GACA,kBAAA;GACA,qBAAA;CACA","file":"DialogActions.vue","sourcesContent":["<template>\n  <span class=\"dialog-actions\">\n    <b-btn v-for=\"action in actionlist\" :key=\"action.key\"\n      :variant=\"action.variant || variant\"\n      :loading=\"loadingAction === action.key\"\n      :disabled=\"isActionDisabled(action) || !!loadingAction\"\n      @click=\"onActionClick(action)\">\n      <Loader v-if=\"loadingAction === action.key\" size=\"8px\"/>\n      <template v-else>{{ action.text }}</template>\n    </b-btn>\n  </span>\n</template>\n<script>\n\nimport Actionable from 'vuedl/src/mixins/actionable'\nimport Loader from './Loader.vue'\n\nexport default {\n  components: {\n    Loader\n  },\n  mixins: [ Actionable ],\n  props: {\n    variant: {\n      type: String,\n      default: 'outline-primary'\n    }\n  }\n}\n</script>\n<style>\n  .dialog-actions button {\n     margin-right: 4px;\n     margin-right: .25rem;\n  }\n</style>\n"]}, media: undefined });

  };
  /* scoped */
  var __vue_scope_id__$1 = undefined;
  /* module identifier */
  var __vue_module_identifier__$1 = undefined;
  /* functional template */
  var __vue_is_functional_template__$1 = false;
  /* component normalizer */
  function __vue_normalize__$1(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogActions.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    {
      var hook;
      if (style) {
        hook = function(context) {
          style.call(this, createInjector(context));
        };
      }

      if (hook !== undefined) {
        if (component.functional) {
          // register for functional component in vue file
          var originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context)
          };
        } else {
          // inject component registration as beforeCreate hook
          var existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }

    return component
  }
  /* style inject */
  function __vue_create_injector__$1() {
    var head = document.head || document.getElementsByTagName('head')[0];
    var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});
    var isOldIE =
      typeof navigator !== 'undefined' &&
      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

      var group = isOldIE ? css.media || 'default' : id;
      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

      if (!style.ids.includes(id)) {
        var code = css.source;
        var index = style.ids.length;

        style.ids.push(id);

        if (isOldIE) {
          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
        }

        if (!style.element) {
          var el = style.element = document.createElement('style');
          el.type = 'text/css';

          if (css.media) { el.setAttribute('media', css.media); }
          if (isOldIE) {
            el.setAttribute('data-group', group);
            el.setAttribute('data-next-index', '0');
          }

          head.appendChild(el);
        }

        if (isOldIE) {
          index = parseInt(style.element.getAttribute('data-next-index'));
          style.element.setAttribute('data-next-index', index + 1);
        }

        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts
            .filter(Boolean)
            .join('\n');
        } else {
          var textNode = document.createTextNode(code);
          var nodes = style.element.childNodes;
          if (nodes[index]) { style.element.removeChild(nodes[index]); }
          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
          else { style.element.appendChild(textNode); }
        }
      }
    }
  }
  /* style inject SSR */
  

  
  var DialogActions = __vue_normalize__$1(
    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
    __vue_inject_styles__$1,
    __vue_script__$1,
    __vue_scope_id__$1,
    __vue_is_functional_template__$1,
    __vue_module_identifier__$1,
    __vue_create_injector__$1,
    undefined
  )

//
var zIndex = 1100;
var script$2 = {
  components: {
    DialogActions: DialogActions
  },
  props: {
    size: {
      type: String,
      default: function () {
        'md';
      }
    },
    title: String,
    actions: [Array, Object],
    hideBackdrop: Boolean,
    centered: Boolean
  },
  methods: {
    _destroy: function _destroy() {// stub
    },

    onModalHidden: function onModalHidden() {
      zIndex = zIndex - 2;
      this.$destroy();
    },

    onModalShown: function onModalShown(ev) {
      var parent = ev.target.parentElement;
      var backdrop = parent.querySelector('.modal-backdrop');
      backdrop && backdrop.style && (backdrop.style['z-index'] = ++zIndex);
      var modal = parent.querySelector('.modal');
      modal && modal.style && (modal.style['z-index'] = ++zIndex);
    }

  }
};

/* script */
            var __vue_script__$2 = script$2;
            
/* template */
var __vue_render__$2 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "b-modal",
    {
      staticClass: "dialog-layout",
      attrs: {
        "hide-header": "",
        "hide-footer": "",
        "hide-backdrop": _vm.hideBackdrop,
        centered: _vm.centered,
        size: _vm.size,
        "body-class": "dialog-layout-modal-body",
        "no-close-on-backdrop": _vm.persistent || _vm.loading,
        "no-close-on-esc": _vm.persistent || _vm.loading
      },
      on: { hidden: _vm.onModalHidden, shown: _vm.onModalShown },
      model: {
        value: _vm.isActive,
        callback: function($$v) {
          _vm.isActive = $$v;
        },
        expression: "isActive"
      }
    },
    [_vm._t("default")],
    2
  )
};
var __vue_staticRenderFns__$2 = [];
__vue_render__$2._withStripped = true;

  /* style */
  var __vue_inject_styles__$2 = function (inject) {
    if (!inject) { return }
    inject("data-v-0f764872_0", { source: "\n.dialog-layout-modal-body {\n  padding: 0;\n}\n", map: {"version":3,"sources":["/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogLayout.vue"],"names":[],"mappings":";AAwDA;EACA,WAAA;CACA","file":"DialogLayout.vue","sourcesContent":["<template>\n  <b-modal v-model=\"isActive\"\n    class=\"dialog-layout\"\n    hide-header\n    hide-footer\n    :hide-backdrop=\"hideBackdrop\"\n    :centered=\"centered\"\n    :size=\"size\"\n    body-class=\"dialog-layout-modal-body\"\n    :no-close-on-backdrop=\"persistent || loading\"\n    :no-close-on-esc=\"persistent || loading\"\n    @hidden=\"onModalHidden\"\n    @shown=\"onModalShown\">\n    <slot/>\n  </b-modal>\n</template>\n\n<script>\n\nimport DialogActions from './DialogActions.vue'\n\nlet zIndex = 1100\n\nexport default {\n  components: {\n    DialogActions\n  },\n  props: {\n    size: {\n      type: String,\n      default: () => { 'md' }\n    },\n    title: String,\n    actions: [Array, Object],\n    hideBackdrop: Boolean,\n    centered: Boolean\n  },\n  methods: {\n    _destroy () {\n      // stub\n    },\n    onModalHidden () {\n      zIndex = zIndex - 2\n      this.$destroy()\n    },\n    onModalShown (ev) {\n      const parent = ev.target.parentElement\n      const backdrop = parent.querySelector('.modal-backdrop')\n      backdrop && backdrop.style && (backdrop.style['z-index'] = ++zIndex)\n      const modal = parent.querySelector('.modal')\n      modal && modal.style && (modal.style['z-index'] = ++zIndex)\n    }\n  }\n}\n</script>\n<style>\n  .dialog-layout-modal-body {\n    padding: 0;\n  }\n</style>\n"]}, media: undefined });

  };
  /* scoped */
  var __vue_scope_id__$2 = undefined;
  /* module identifier */
  var __vue_module_identifier__$2 = undefined;
  /* functional template */
  var __vue_is_functional_template__$2 = false;
  /* component normalizer */
  function __vue_normalize__$2(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogLayout.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    {
      var hook;
      if (style) {
        hook = function(context) {
          style.call(this, createInjector(context));
        };
      }

      if (hook !== undefined) {
        if (component.functional) {
          // register for functional component in vue file
          var originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context)
          };
        } else {
          // inject component registration as beforeCreate hook
          var existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }

    return component
  }
  /* style inject */
  function __vue_create_injector__$2() {
    var head = document.head || document.getElementsByTagName('head')[0];
    var styles = __vue_create_injector__$2.styles || (__vue_create_injector__$2.styles = {});
    var isOldIE =
      typeof navigator !== 'undefined' &&
      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

      var group = isOldIE ? css.media || 'default' : id;
      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

      if (!style.ids.includes(id)) {
        var code = css.source;
        var index = style.ids.length;

        style.ids.push(id);

        if (isOldIE) {
          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
        }

        if (!style.element) {
          var el = style.element = document.createElement('style');
          el.type = 'text/css';

          if (css.media) { el.setAttribute('media', css.media); }
          if (isOldIE) {
            el.setAttribute('data-group', group);
            el.setAttribute('data-next-index', '0');
          }

          head.appendChild(el);
        }

        if (isOldIE) {
          index = parseInt(style.element.getAttribute('data-next-index'));
          style.element.setAttribute('data-next-index', index + 1);
        }

        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts
            .filter(Boolean)
            .join('\n');
        } else {
          var textNode = document.createTextNode(code);
          var nodes = style.element.childNodes;
          if (nodes[index]) { style.element.removeChild(nodes[index]); }
          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
          else { style.element.appendChild(textNode); }
        }
      }
    }
  }
  /* style inject SSR */
  

  
  var DialogLayout = __vue_normalize__$2(
    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
    __vue_inject_styles__$2,
    __vue_script__$2,
    __vue_scope_id__$2,
    __vue_is_functional_template__$2,
    __vue_module_identifier__$2,
    __vue_create_injector__$2,
    undefined
  )

var Colorable = {
  props: {
    type: String,
    color: String
  },
  computed: {
    getColor: function getColor() {
      return this.color || this.type;
    }

  }
};

//
var script$3 = {
  components: {
    DialogActions: DialogActions
  },
  layout: 'default',
  mixins: [Confirmable, Colorable],
  computed: {
    headerTextVariant: function headerTextVariant() {
      return ['info', 'danger'].indexOf(this.type) >= 0 ? 'light' : 'dark';
    }

  }
};

/* script */
            var __vue_script__$3 = script$3;
            
/* template */
var __vue_render__$3 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    [
      _c(
        "DialogCard",
        {
          attrs: {
            actions: _vm.actions,
            title: _vm.title,
            "header-bg-variant": _vm.type,
            "header-text-variant": _vm.headerTextVariant
          }
        },
        [
          _c("div", {
            staticClass: "dialog-confirm-text",
            domProps: { innerHTML: _vm._s(_vm.text) }
          })
        ]
      )
    ],
    1
  )
};
var __vue_staticRenderFns__$3 = [];
__vue_render__$3._withStripped = true;

  /* style */
  var __vue_inject_styles__$3 = undefined;
  /* scoped */
  var __vue_scope_id__$3 = undefined;
  /* module identifier */
  var __vue_module_identifier__$3 = undefined;
  /* functional template */
  var __vue_is_functional_template__$3 = false;
  /* component normalizer */
  function __vue_normalize__$3(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Confirm.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var Confirm = __vue_normalize__$3(
    { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
    __vue_inject_styles__$3,
    __vue_script__$3,
    __vue_scope_id__$3,
    __vue_is_functional_template__$3,
    __vue_module_identifier__$3,
    undefined,
    undefined
  )

//
var script$4 = {
  components: {
    DialogActions: DialogActions
  },
  layout: ['notification', {
    showClose: false
  }],
  props: {
    type: {
      type: String,
      default: function () { return 'info'; }
    },
    actions: [Array, Object],
    text: String,
    dismissible: {
      type: Boolean,
      default: true
    }
  }
};

/* script */
            var __vue_script__$4 = script$4;
            
/* template */
var __vue_render__$4 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "b-alert",
    {
      staticStyle: { "margin-bottom": "0" },
      attrs: { show: "", variant: _vm.type, dismissible: _vm.dismissible },
      on: {
        dismissed: function($event) {
          _vm.$emit("submit");
        }
      }
    },
    [_c("span", { domProps: { innerHTML: _vm._s(_vm.text) } })]
  )
};
var __vue_staticRenderFns__$4 = [];
__vue_render__$4._withStripped = true;

  /* style */
  var __vue_inject_styles__$4 = undefined;
  /* scoped */
  var __vue_scope_id__$4 = undefined;
  /* module identifier */
  var __vue_module_identifier__$4 = undefined;
  /* functional template */
  var __vue_is_functional_template__$4 = false;
  /* component normalizer */
  function __vue_normalize__$4(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Alert.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var Alert = __vue_normalize__$4(
    { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
    __vue_inject_styles__$4,
    __vue_script__$4,
    __vue_scope_id__$4,
    __vue_is_functional_template__$4,
    __vue_module_identifier__$4,
    undefined,
    undefined
  )

//
var script$5 = {
  components: {
    DialogActions: DialogActions
  },
  props: {
    title: String,
    actions: [Array, Object],
    headerBgVariant: String,
    headerTextVariant: String,
    headerBorderVariant: String,
    headerClass: String
  },
  computed: {
    headerClasses: function headerClasses() {
      var obj;

      return ['modal-header', ( obj = {}, obj[("bg-" + (this.headerBgVariant))] = Boolean(this.headerBgVariant), obj[("text-" + (this.headerTextVariant))] = Boolean(this.headerTextVariant), obj[("border-" + (this.headerBorderVariant))] = Boolean(this.headerBorderVariant), obj), this.headerClass];
    }

  },
  methods: {
    trigger: function trigger(name) {
      this.$refs.actions && this.$refs.actions.trigger(name);
    }

  }
};

/* script */
            var __vue_script__$5 = script$5;
            
/* template */
var __vue_render__$5 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", [
    _c(
      "header",
      { class: _vm.headerClasses },
      [
        _vm._t("title", [
          _c("h5", { staticClass: "modal-title" }, [_vm._v(_vm._s(_vm.title))])
        ]),
        _vm._v(" "),
        _c(
          "button",
          {
            staticClass: "close",
            attrs: { type: "button", "aria-label": "Close" }
          },
          [_vm._v("×")]
        )
      ],
      2
    ),
    _vm._v(" "),
    _c("div", { staticClass: "modal-body" }, [_vm._t("default")], 2),
    _vm._v(" "),
    _vm.actions
      ? _c(
          "footer",
          { staticClass: "modal-footer" },
          [
            _c("DialogActions", {
              ref: "actions",
              attrs: { actions: _vm.actions }
            })
          ],
          1
        )
      : _vm._e()
  ])
};
var __vue_staticRenderFns__$5 = [];
__vue_render__$5._withStripped = true;

  /* style */
  var __vue_inject_styles__$5 = undefined;
  /* scoped */
  var __vue_scope_id__$5 = undefined;
  /* module identifier */
  var __vue_module_identifier__$5 = undefined;
  /* functional template */
  var __vue_is_functional_template__$5 = false;
  /* component normalizer */
  function __vue_normalize__$5(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogCard.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var DialogCard = __vue_normalize__$5(
    { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
    __vue_inject_styles__$5,
    __vue_script__$5,
    __vue_scope_id__$5,
    __vue_is_functional_template__$5,
    __vue_module_identifier__$5,
    undefined,
    undefined
  )

//
var script$6 = {
  components: {
    DialogCard: DialogCard
  },
  layout: 'default',
  mixins: [Confirmable],
  props: {
    value: String
  },
  computed: {
    parsedActions: function parsedActions() {
      var actions = this.actions;

      if (actions[true]) {
        if (typeof actions[true] === 'string') {
          actions[true] = {
            'text': actions[true],
            handle: this.onSubmit
          };
        } else {
          actions[true].handle = this.onSubmit;
        }
      }

      return actions;
    }

  },

  data: function data() {
    return {
      editedValue: this.value
    };
  },

  methods: {
    onSubmit: function onSubmit() {
      this.$emit('submit', this.editedValue);
    }

  }
};

/* script */
            var __vue_script__$6 = script$6;
            
/* template */
var __vue_render__$6 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    [
      _c(
        "DialogCard",
        { attrs: { title: _vm.title, actions: _vm.parsedActions } },
        [
          _c("b-form-input", {
            attrs: { autofocus: "", placeholder: _vm.text, required: "" },
            on: {
              keypress: function($event) {
                if (
                  !("button" in $event) &&
                  _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
                ) {
                  return null
                }
                return _vm.onSubmit($event)
              }
            },
            model: {
              value: _vm.editedValue,
              callback: function($$v) {
                _vm.editedValue = $$v;
              },
              expression: "editedValue"
            }
          })
        ],
        1
      )
    ],
    1
  )
};
var __vue_staticRenderFns__$6 = [];
__vue_render__$6._withStripped = true;

  /* style */
  var __vue_inject_styles__$6 = undefined;
  /* scoped */
  var __vue_scope_id__$6 = undefined;
  /* module identifier */
  var __vue_module_identifier__$6 = undefined;
  /* functional template */
  var __vue_is_functional_template__$6 = false;
  /* component normalizer */
  function __vue_normalize__$6(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Prompt.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var Prompt = __vue_normalize__$6(
    { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
    __vue_inject_styles__$6,
    __vue_script__$6,
    __vue_scope_id__$6,
    __vue_is_functional_template__$6,
    __vue_module_identifier__$6,
    undefined,
    undefined
  )

var Plugin = {
  install: function install(Vue, options) {
    if ( options === void 0 ) options = {};

    var property = options.property || '$dialog'; // const messageProperty = options.messageProperty

    Vue.use(Vuedl, options);
    var manager = Vue.prototype[property];
    manager.layout('default', DialogLayout);
    Vue.component('DialogActions', DialogActions);
    Vue.component('DialogCard', DialogCard);
    manager.on('show', function () {
      document.body.classList.remove('modal-open');
    });
    manager.component('confirm', Confirm, {
      waitForResult: true,
      actions: {
        'false': 'Cancel',
        'true': 'OK'
      }
    });
    manager.component('warning', Confirm, {
      type: 'warning',
      waitForResult: true,
      actions: {
        'false': 'Cancel',
        'true': 'OK'
      }
    });
    manager.component('info', Confirm, {
      type: 'info',
      waitForResult: true,
      actions: {
        'false': 'Cancel',
        'true': 'OK'
      }
    });
    manager.component('error', Confirm, {
      type: 'danger',
      waitForResult: true,
      actions: ['Close']
    }); // manager.component('toast', Toast, {
    //   waitForResult: true
    // })
    // manager.message = {
    //   info: (message, options) => manager.toast({ text: message, variant: 'info', ...options }),
    //   error: (message, options) => manager.toast({ text: message, variant: 'danger', ...options }),
    //   success: (message, options) => manager.toast({ text: message, variant: 'success', ...options }),
    //   warning: (message, options) => manager.toast({ text: message, variant: 'warning', ...options })
    // }
    // messageProperty && (Vue.prototype[messageProperty] = manager.message)

    manager.component('alert', Alert, {
      waitForResult: true
    });
    manager.notify = {
      info: function (message, options) { return manager.alert(Object.assign({
        text: message,
        type: 'info'
      }, options)); },
      error: function (message, options) { return manager.alert(Object.assign({
        text: message,
        type: 'danger'
      }, options)); },
      success: function (message, options) { return manager.alert(Object.assign({
        text: message,
        type: 'success'
      }, options)); },
      warning: function (message, options) { return manager.alert(Object.assign({
        text: message,
        type: 'warning'
      }, options)); }
    };
    manager.component('prompt', Prompt, {
      waitForResult: true,
      actions: {
        false: 'Cancel',
        true: 'OK'
      }
    });
  }

};

module.exports = Plugin;
