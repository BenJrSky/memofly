{"remainingRequest":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/node_modules/babel-loader/lib/index.js!/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/src/memoFly-api/SIGNCredentials.js","dependencies":[{"path":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/src/memoFly-api/SIGNCredentials.js","mtime":1632316188905},{"path":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/node_modules/cache-loader/dist/cjs.js","mtime":1632248233346},{"path":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/node_modules/babel-loader/lib/index.js","mtime":1632248232528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyI7CmltcG9ydCBTdG9yZSBmcm9tICcuLy4uL3N0b3JlL3N0b3JlJzsKaW1wb3J0IHJvdXRlciBmcm9tICcuLy4uL3JvdXRlci9pbmRleC50cyc7CmltcG9ydCB7IFRvYXN0IH0gZnJvbSAiLi8uLi9zZXJ2aWNlcy9Ub2FzdC5qcyI7CmV4cG9ydCB2YXIgU0lHTkNyZWRlbnRpYWxzID0gZnVuY3Rpb24gU0lHTkNyZWRlbnRpYWxzKCkgewogIHZhciB1c2VyRW1haWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7CiAgdmFyIHVzZXJQYXNzd29yZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDsKICB2YXIgYXV0aCA9ICdCYXNpYyAnICsgQnVmZmVyLmZyb20odXNlckVtYWlsICsgIjoiICsgdXNlclBhc3N3b3JkKS50b1N0cmluZygnYmFzZTY0Jyk7CiAgdmFyIHVybCA9ICdodHRwczovL3d3dy5tZW1vZmx5Lml0OjMwMDAvTVcvdjAuMS91c2VyJzsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgaWYgKHVzZXJFbWFpbCAmJiB1c2VyUGFzc3dvcmQpIHsKICAgICAgZmV0Y2godXJsLCB7CiAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcsCiAgICAgICAgICAnYXV0aG9yaXphdGlvbic6IGF1dGgKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICByZXR1cm4gcmVzcC5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBpZiAoJ3N0YXR1cycgaW4gZGF0YSkgewogICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgICB2YXIgc3RvcmUgPSBuZXcgU3RvcmUoKTsKICAgICAgICAgICAgc3RvcmUuc2V0KCdzZXNzaW9uJywgewogICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyRW1haWwsCiAgICAgICAgICAgICAgcGFzc3dvcmQ6IHVzZXJQYXNzd29yZCwKICAgICAgICAgICAgICBsb2dnZWQ6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIFRvYXN0KHsKICAgICAgICAgICAgICBzdGF0dXM6IDIwMAogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgc3VjY2VzczogIlV0ZW50ZSBMb2dnYXRvIgogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmVzb2x2ZShyb3V0ZXIucHVzaCgnLycpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBfc3RvcmUgPSBuZXcgU3RvcmUoKTsKCiAgICAgICAgICAgIF9zdG9yZS5yZW1vdmUoJ3Nlc3Npb24nKTsKCiAgICAgICAgICAgIFRvYXN0KHsKICAgICAgICAgICAgICBlcnJvcjogIlV0ZW50ZSBTY29ub3NjaXV0byEiCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXNvbHZlKHJvdXRlci5wdXNoKCcvbG9naW4nKSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBfc3RvcmUyID0gbmV3IFN0b3JlKCk7CgogICAgICAgICAgX3N0b3JlMi5yZW1vdmUoJ3Nlc3Npb24nKTsKCiAgICAgICAgICBUb2FzdCh7CiAgICAgICAgICAgIGVycm9yOiAiRVJST1JFIC0tLT4gIiArIEpTT04uc3RyaW5naWZ5KGRhdGEpCiAgICAgICAgICB9KTsKICAgICAgICAgIHJlc29sdmUocm91dGVyLnB1c2goJy9sb2dpbicpKTsKICAgICAgICB9CiAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICB2YXIgc3RvcmUgPSBuZXcgU3RvcmUoKTsKICAgICAgICBzdG9yZS5yZW1vdmUoJ3Nlc3Npb24nKTsKICAgICAgICBUb2FzdCh7CiAgICAgICAgICBlcnJvcjogIkVSUk9SRSAtLS0+ICIgKyBKU09OLnN0cmluZ2lmeShlcnIpCiAgICAgICAgfSk7CiAgICAgICAgcmVzb2x2ZShyb3V0ZXIucHVzaCgnL2xvZ2luJykpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBzdG9yZSA9IG5ldyBTdG9yZSgpOwogICAgICBzdG9yZS5yZW1vdmUoJ3Nlc3Npb24nKTsKICAgICAgVG9hc3QoewogICAgICAgIGVycm9yOiAiREVWSSBJTlNFUklSRSBFTUFJTCBFIFBBU1NXT1JEIgogICAgICB9KTsKICAgICAgcmVzb2x2ZShyb3V0ZXIucHVzaCgnL2xvZ2luJykpOwogICAgfQogIH0pOwp9Ow=="},{"version":3,"sources":["/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/src/memoFly-api/SIGNCredentials.js"],"names":["Store","router","Toast","SIGNCredentials","userEmail","userPassword","auth","Buffer","from","toString","url","Promise","resolve","reject","fetch","method","headers","then","resp","json","data","status","store","set","username","password","logged","success","push","remove","error","JSON","stringify","err"],"mappings":"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","sourcesContent":["import Store from './../store/store';\nimport router from './../router/index.ts';\nimport { Toast } from \"./../services/Toast.js\";\n\nexport let SIGNCredentials = (userEmail=null, userPassword=null) => {\n\n        let auth = 'Basic ' + Buffer.from(userEmail + \":\" + userPassword).toString('base64');\n        let url = 'https://www.memofly.it:3000/MW/v0.1/user';\n\n        return new Promise((resolve, reject) => {\n\n            if(userEmail && userPassword){\n\n                fetch(url, {\n                    method: 'GET',\n                    headers: {\n                      'Content-Type': 'application/json;charset=utf-8',\n                      'authorization': auth\n                    }          \n                })\n                .then((resp) => resp.json())\n                .then((data)=>{\n                \n                    if('status' in data){\n                        if(data.status==200){\n                            let store = new Store;\n                                store.set('session',{username:userEmail,password:userPassword,logged:true});\n                                Toast({status:200},{success:\"Utente Loggato\"});\n                                resolve(router.push('/'));\n                         }else{\n                            let store = new Store;\n                                store.remove('session');\n                                Toast({error:\"Utente Sconosciuto!\"});\n                                resolve(router.push('/login'));\n                         }\n                    }else{\n                        let store = new Store;\n                            store.remove('session');\n                            Toast({error:\"ERRORE ---> \"+JSON.stringify(data)});\n                            resolve(router.push('/login'));\n                    }\n\n                })\n                .catch((err) =>{\n                    let store = new Store;\n                        store.remove('session');\n                        Toast({error:\"ERRORE ---> \"+JSON.stringify(err)});\n                        resolve(router.push('/login'));\n                })\n\n            }else{\n                let store = new Store;\n                    store.remove('session');\n                    Toast({error:\"DEVI INSERIRE EMAIL E PASSWORD\"});\n                    resolve(router.push('/login'));\n            }\n     \n     \n         });\n\n\n\n}"]}]}