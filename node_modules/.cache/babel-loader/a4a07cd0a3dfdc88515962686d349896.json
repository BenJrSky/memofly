{"remainingRequest":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/node_modules/babel-loader/lib/index.js!/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/src/memoFly-api/POSTClient.js","dependencies":[{"path":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/src/memoFly-api/POSTClient.js","mtime":1632248241631},{"path":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/node_modules/cache-loader/dist/cjs.js","mtime":1632248233346},{"path":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/node_modules/babel-loader/lib/index.js","mtime":1632248232528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyI7CmltcG9ydCBTdG9yZSBmcm9tICcuLi9zdG9yZS9zdG9yZSc7CmV4cG9ydCB2YXIgUE9TVENsaWVudCA9IGZ1bmN0aW9uIFBPU1RDbGllbnQoZGF0YUpTT04pIHsKICB2YXIgdXJsID0gJ2h0dHBzOi8vd3d3Lm1lbW9mbHkuaXQ6MzAwMC9NVy92MC4xL2NsaWVudGkvJzsKICB2YXIgc3RvcmUgPSBuZXcgU3RvcmUoKTsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgdmFyIHVzZXJuYW1lID0gc3RvcmUuZ2V0KCdzZXNzaW9uJykudXNlcm5hbWU7CiAgICB2YXIgcGFzc3dvcmQgPSBzdG9yZS5nZXQoJ3Nlc3Npb24nKS5wYXNzd29yZDsKICAgIHZhciBhdXRoID0gJ0Jhc2ljICcgKyBCdWZmZXIuZnJvbSh1c2VybmFtZSArICI6IiArIHBhc3N3b3JkKS50b1N0cmluZygnYmFzZTY0Jyk7CiAgICBmZXRjaCh1cmwsIHsKICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgIGhlYWRlcnM6IHsKICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcsCiAgICAgICAgJ2F1dGhvcml6YXRpb24nOiBhdXRoCiAgICAgIH0sCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGFKU09OKQogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICByZXR1cm4gcmVzcC5qc29uKCk7CiAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIGNvbnNvbGUubG9nKGRhdGEpOwogICAgICByZXNvbHZlKGRhdGEpOwogICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycikgewogICAgICByZWplY3QoZXJyKTsKICAgIH0pOwogIH0pOwp9Ow=="},{"version":3,"sources":["/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/src/memoFly-api/POSTClient.js"],"names":["Store","POSTClient","dataJSON","url","store","Promise","resolve","reject","username","get","password","auth","Buffer","from","toString","fetch","method","headers","body","JSON","stringify","then","resp","json","data","console","log","err"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AAEA,OAAO,IAAIC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAc;AAElC,MAAIC,GAAG,GAAG,8CAAV;AAEA,MAAIC,KAAK,GAAG,IAAIJ,KAAJ,EAAZ;AAEA,SAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,QAAIC,QAAQ,GAAGJ,KAAK,CAACK,GAAN,CAAU,SAAV,EAAqBD,QAApC;AACA,QAAIE,QAAQ,GAAGN,KAAK,CAACK,GAAN,CAAU,SAAV,EAAqBC,QAApC;AAEA,QAAIC,IAAI,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYL,QAAQ,GAAG,GAAX,GAAiBE,QAA7B,EAAuCI,QAAvC,CAAgD,QAAhD,CAAtB;AAECC,IAAAA,KAAK,CAACZ,GAAD,EAAM;AACRa,MAAAA,MAAM,EAAE,MADA;AAERC,MAAAA,OAAO,EAAE;AACP,wBAAgB,gCADT;AAEP,yBAAiBN;AAFV,OAFD;AAORO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAelB,QAAf;AAPE,KAAN,CAAL,CASAmB,IATA,CASK,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,IAAL,EAAV;AAAA,KATL,EAUAF,IAVA,CAUK,UAACG,IAAD,EAAQ;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAlB,MAAAA,OAAO,CAACkB,IAAD,CAAP;AACH,KAbA,WAcM,UAACG,GAAD,EAAQ;AACXpB,MAAAA,MAAM,CAACoB,GAAD,CAAN;AACH,KAhBA;AAmBJ,GA1BM,CAAP;AAkCH,CAxCM","sourcesContent":["import Store from '../store/store';\n\nexport let POSTClient = (dataJSON) => {\n\n    let url = 'https://www.memofly.it:3000/MW/v0.1/clienti/';\n\n    let store = new Store;\n\n    return new Promise((resolve, reject) => {\n\n        let username = store.get('session').username;\n        let password = store.get('session').password;\n\n        let auth = 'Basic ' + Buffer.from(username + \":\" + password).toString('base64');\n\n         fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=utf-8',\n              'authorization': auth\n\n            },\n            body: JSON.stringify(dataJSON),          \n        })\n        .then((resp) => resp.json())\n        .then((data)=>{\n            console.log(data)\n            resolve(data);\n        })\n        .catch((err) =>{\n            reject(err)\n        })\n\n\n    });\n    \n    \n\n\n\n\n\n}"]}]}