{"remainingRequest":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/node_modules/babel-loader/lib/index.js!/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/src/memoFly-api/PUTClient.js","dependencies":[{"path":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/src/memoFly-api/PUTClient.js","mtime":1630356691274},{"path":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/node_modules/cache-loader/dist/cjs.js","mtime":1630067776591},{"path":"/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/node_modules/babel-loader/lib/index.js","mtime":1630067775262}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyI7CmltcG9ydCBTdG9yZSBmcm9tICcuLi9zdG9yZS9zdG9yZSc7CmV4cG9ydCB2YXIgUFVUQ2xpZW50ID0gZnVuY3Rpb24gUFVUQ2xpZW50KGRhdGFKU09OKSB7CiAgdmFyIHVybCA9ICdodHRwczovL3d3dy5tZW1vZmx5Lml0OjMwMDAvTVcvdjAuMS9jbGllbnRpLyc7CiAgdmFyIHN0b3JlID0gbmV3IFN0b3JlKCk7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHZhciB1c2VybmFtZSA9IHN0b3JlLmdldCgnc2Vzc2lvbicpLnVzZXJuYW1lOwogICAgdmFyIHBhc3N3b3JkID0gc3RvcmUuZ2V0KCdzZXNzaW9uJykucGFzc3dvcmQ7CiAgICB2YXIgYXV0aCA9ICdCYXNpYyAnICsgQnVmZmVyLmZyb20odXNlcm5hbWUgKyAiOiIgKyBwYXNzd29yZCkudG9TdHJpbmcoJ2Jhc2U2NCcpOwogICAgZmV0Y2godXJsLCB7CiAgICAgIG1ldGhvZDogJ1BVVCcsCiAgICAgIGhlYWRlcnM6IHsKICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcsCiAgICAgICAgJ2F1dGhvcml6YXRpb24nOiBhdXRoCiAgICAgIH0sCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGFKU09OKQogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICByZXR1cm4gcmVzcC5qc29uKCk7CiAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIGNvbnNvbGUubG9nKGRhdGEpOwogICAgICByZXNvbHZlKGRhdGEpOwogICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycikgewogICAgICByZWplY3QoZXJyKTsKICAgIH0pOwogIH0pOwp9Ow=="},{"version":3,"sources":["/Users/ben/Desktop/BEN/WORKS/FLYIP/VUE/src/memoFly-api/PUTClient.js"],"names":["Store","PUTClient","dataJSON","url","store","Promise","resolve","reject","username","get","password","auth","Buffer","from","toString","fetch","method","headers","body","JSON","stringify","then","resp","json","data","console","log","err"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AAEA,OAAO,IAAIC,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAc;AAEjC,MAAIC,GAAG,GAAG,8CAAV;AAEA,MAAIC,KAAK,GAAG,IAAIJ,KAAJ,EAAZ;AAEA,SAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,QAAIC,QAAQ,GAAGJ,KAAK,CAACK,GAAN,CAAU,SAAV,EAAqBD,QAApC;AACA,QAAIE,QAAQ,GAAGN,KAAK,CAACK,GAAN,CAAU,SAAV,EAAqBC,QAApC;AAEA,QAAIC,IAAI,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYL,QAAQ,GAAG,GAAX,GAAiBE,QAA7B,EAAuCI,QAAvC,CAAgD,QAAhD,CAAtB;AAECC,IAAAA,KAAK,CAACZ,GAAD,EAAM;AACRa,MAAAA,MAAM,EAAE,KADA;AAERC,MAAAA,OAAO,EAAE;AACP,wBAAgB,gCADT;AAEP,yBAAiBN;AAFV,OAFD;AAMRO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAelB,QAAf;AANE,KAAN,CAAL,CAQAmB,IARA,CAQK,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,IAAL,EAAV;AAAA,KARL,EASAF,IATA,CASK,UAACG,IAAD,EAAQ;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAlB,MAAAA,OAAO,CAACkB,IAAD,CAAP;AACH,KAZA,WAaM,UAACG,GAAD,EAAQ;AACXpB,MAAAA,MAAM,CAACoB,GAAD,CAAN;AACH,KAfA;AAkBJ,GAzBM,CAAP;AAiCH,CAvCM","sourcesContent":["import Store from '../store/store';\n\nexport let PUTClient = (dataJSON) => {\n\n    let url = 'https://www.memofly.it:3000/MW/v0.1/clienti/';\n\n    let store = new Store;\n\n    return new Promise((resolve, reject) => {\n\n        let username = store.get('session').username;\n        let password = store.get('session').password;\n\n        let auth = 'Basic ' + Buffer.from(username + \":\" + password).toString('base64');\n\n         fetch(url, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json;charset=utf-8',\n              'authorization': auth\n            },\n            body: JSON.stringify(dataJSON),          \n        })\n        .then((resp) => resp.json())\n        .then((data)=>{\n            console.log(data)\n            resolve(data);\n        })\n        .catch((err) =>{\n            reject(err)\n        })\n\n\n    });\n    \n    \n\n\n\n\n\n}"]}]}